CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);

START TRANSACTION;
DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'webhooks') THEN
        CREATE SCHEMA webhooks;
    END IF;
END $EF$;

CREATE TABLE orders (
    "Id" uuid NOT NULL,
    "CustomerName" text NOT NULL,
    "Amount" numeric NOT NULL,
    "CreatedAt" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_orders" PRIMARY KEY ("Id")
);

CREATE TABLE permissions (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NOT NULL,
    CONSTRAINT "PK_permissions" PRIMARY KEY ("Id")
);

CREATE TABLE roles (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NOT NULL,
    CONSTRAINT "PK_roles" PRIMARY KEY ("Id")
);

CREATE TABLE webhooks.subscriptions (
    "Id" uuid NOT NULL,
    "EventType" text NOT NULL,
    "WebhookUrl" text NOT NULL,
    "CreatedOnUtc" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_subscriptions" PRIMARY KEY ("Id")
);

CREATE TABLE users (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Email" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "CreatedOnUtc" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_users" PRIMARY KEY ("Id")
);

CREATE TABLE role_permissions (
    "RoleId" integer NOT NULL,
    "PermissionId" integer NOT NULL,
    CONSTRAINT "PK_role_permissions" PRIMARY KEY ("RoleId", "PermissionId"),
    CONSTRAINT "FK_role_permissions_permissions_PermissionId" FOREIGN KEY ("PermissionId") REFERENCES permissions ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_role_permissions_roles_RoleId" FOREIGN KEY ("RoleId") REFERENCES roles ("Id") ON DELETE CASCADE
);

CREATE TABLE webhooks.delivery_attempts (
    "Id" uuid NOT NULL,
    "WebhookSubscriptionId" uuid NOT NULL,
    "Payload" text NOT NULL,
    "ResponseStatusCode" integer,
    "Success" boolean NOT NULL,
    "Timestamp" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_delivery_attempts" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_delivery_attempts_subscriptions_WebhookSubscriptionId" FOREIGN KEY ("WebhookSubscriptionId") REFERENCES webhooks.subscriptions ("Id") ON DELETE CASCADE
);

CREATE TABLE role_users (
    "RolesId" integer NOT NULL,
    "UsersId" integer NOT NULL,
    CONSTRAINT "PK_role_users" PRIMARY KEY ("RolesId", "UsersId"),
    CONSTRAINT "FK_role_users_roles_RolesId" FOREIGN KEY ("RolesId") REFERENCES roles ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_role_users_users_UsersId" FOREIGN KEY ("UsersId") REFERENCES users ("Id") ON DELETE CASCADE
);

INSERT INTO permissions ("Id", "Name")
VALUES (1, 'AccessOrders');
INSERT INTO permissions ("Id", "Name")
VALUES (2, 'ReadOrders');
INSERT INTO permissions ("Id", "Name")
VALUES (3, 'AccessRoles');
INSERT INTO permissions ("Id", "Name")
VALUES (4, 'ReadRoles');
INSERT INTO permissions ("Id", "Name")
VALUES (5, 'CreateWebhookSubscriptions');
INSERT INTO permissions ("Id", "Name")
VALUES (6, 'AssignRoles');

INSERT INTO roles ("Id", "Name")
VALUES (1, 'Admin');
INSERT INTO roles ("Id", "Name")
VALUES (2, 'User');

INSERT INTO users ("Id", "CreatedOnUtc", "Email", "FirstName", "LastName")
VALUES (1, TIMESTAMPTZ '2021-01-01T00:00:00Z', 'admin@admin.com', 'Admin', 'Admin');

INSERT INTO role_permissions ("PermissionId", "RoleId")
VALUES (1, 1);
INSERT INTO role_permissions ("PermissionId", "RoleId")
VALUES (2, 1);
INSERT INTO role_permissions ("PermissionId", "RoleId")
VALUES (3, 1);
INSERT INTO role_permissions ("PermissionId", "RoleId")
VALUES (4, 1);
INSERT INTO role_permissions ("PermissionId", "RoleId")
VALUES (5, 1);
INSERT INTO role_permissions ("PermissionId", "RoleId")
VALUES (6, 1);

INSERT INTO role_users ("RolesId", "UsersId")
VALUES (1, 1);
INSERT INTO role_users ("RolesId", "UsersId")
VALUES (2, 1);

CREATE INDEX "IX_delivery_attempts_WebhookSubscriptionId" ON webhooks.delivery_attempts ("WebhookSubscriptionId");

CREATE INDEX "IX_role_permissions_PermissionId" ON role_permissions ("PermissionId");

CREATE INDEX "IX_role_users_UsersId" ON role_users ("UsersId");

SELECT setval(
    pg_get_serial_sequence('permissions', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM permissions) + 1,
        nextval(pg_get_serial_sequence('permissions', 'Id'))),
    false);
SELECT setval(
    pg_get_serial_sequence('roles', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM roles) + 1,
        nextval(pg_get_serial_sequence('roles', 'Id'))),
    false);
SELECT setval(
    pg_get_serial_sequence('users', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM users) + 1,
        nextval(pg_get_serial_sequence('users', 'Id'))),
    false);

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250217094928_InitialCreate', '9.0.1');

COMMIT;