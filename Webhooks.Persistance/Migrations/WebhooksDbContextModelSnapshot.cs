// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Webhooks.Persistance;

#nullable disable

namespace Webhooks.Persistance.Migrations
{
    [DbContext(typeof(WebhooksDbContext))]
    partial class WebhooksDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Webhooks.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.HasKey("Id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Webhooks.Domain.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AccessOrders"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ReadOrders"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AccessRoles"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ReadRoles"
                        },
                        new
                        {
                            Id = 5,
                            Name = "CreateWebhookSubscriptions"
                        },
                        new
                        {
                            Id = 6,
                            Name = "AssignRoles"
                        });
                });

            modelBuilder.Entity("Webhooks.Domain.Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("profiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Webhooks.Domain.Models.ProfilePermission", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("ProfileId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("profiles_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            ProfileId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ProfileId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            ProfileId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            ProfileId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            ProfileId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            ProfileId = 1,
                            PermissionId = 6
                        });
                });

            modelBuilder.Entity("Webhooks.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOnUtc = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastName = "Admin"
                        });
                });

            modelBuilder.Entity("Webhooks.Domain.Models.WebhookDeliveryAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("integer")
                        .HasColumnName("response_status_code");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean")
                        .HasColumnName("success");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("WebhookSubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("webhook_subscription_id");

                    b.HasKey("Id");

                    b.HasIndex("WebhookSubscriptionId");

                    b.ToTable("delivery_attempts", "webhooks");
                });

            modelBuilder.Entity("Webhooks.Domain.Models.WebhookSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_type");

                    b.Property<string>("WebhookUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("webhook_url");

                    b.HasKey("Id");

                    b.ToTable("subscriptions", "webhooks");
                });

            modelBuilder.Entity("profiles_users", b =>
                {
                    b.Property<int>("profile_id")
                        .HasColumnType("integer");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("profile_id", "user_id");

                    b.HasIndex("user_id");

                    b.ToTable("profiles_users");

                    b.HasData(
                        new
                        {
                            profile_id = 1,
                            user_id = 1
                        },
                        new
                        {
                            profile_id = 2,
                            user_id = 1
                        });
                });

            modelBuilder.Entity("Webhooks.Domain.Models.ProfilePermission", b =>
                {
                    b.HasOne("Webhooks.Domain.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webhooks.Domain.Models.Profile", null)
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Webhooks.Domain.Models.WebhookDeliveryAttempt", b =>
                {
                    b.HasOne("Webhooks.Domain.Models.WebhookSubscription", null)
                        .WithMany()
                        .HasForeignKey("WebhookSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("profiles_users", b =>
                {
                    b.HasOne("Webhooks.Domain.Models.Profile", null)
                        .WithMany()
                        .HasForeignKey("profile_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webhooks.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
